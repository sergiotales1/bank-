login() :
will login into the account established using username and pin input values.
executes initializeLocalStorage() search for currentAccount and store the correspondent array
sets currentAccount.active to true and store it into localStorage


displayUI(movements) : 
is a function that retrieve movements array and will display into the movements container every row of the transition including value, index and if its a deposit or withdrawal
using getItem we retrieve from localStorage with a forEach the account that have the active property set to true, them we use this account to display the movements array on the UI.

initializeLocalStorage () :
sets all accounts.active to false and store them into localStorage.

transfer(type) :
this is the same function that is invoked once you click btnTransfer, and now the difference is that we also can do the whole process of transferring money into the modal button Transfer that shows to the user if some account has requested money to him.
when transfer id is equals to 0 (only will happen if you make a transfer from the request modal) then we will reload the page immediately, otherwise we will have a delay to let the user read the success transfer alert

confirmAcc():
will add the new acc into the accounts array then update the localStorage, remember that now we are initializing the localStorage also into the createAccount button, in past we would just initialize if the user clicks on login.

PROBLEMS: 

10- we need to show some success modal or alert once an account is successfully created!
*** SOLUTION 10 - we now have this but the responsive on mobile should be fixed!

9- dynamically messages could be sent to globalModal and displayed into UI.
*** SOLUTION 9 - DONE, now we send to globalModal() the modal that we are using and the text that will be displayed.

8- we are creating accounts with null value, need to view createAccount again
*** SOLUTION 8 - Solved with if else!

7- request need some attention, atm we are just printing that someone is requesting money for someone with the username and amount solicited but we need to create more interactivity with a button saying transfer or don't
*** SOLUTION 7 - we now recreate the entire modal so we are showing the user that is requesting, the amount and we are also giving to the user 2 options [transfer, ignore], if he ignores every time that the displayUI is called, if he chooses transfer then the requestedMove will be deleted and the money will be transferred.

6- globalModal() is working but is ugly af, we need to refactor this code and clean repeated lines and transfer to inputs still need attention given that if any of the conditions to transfer is equals to false we are not telling the user what's happening just keeping the values there and don't doing anything
*** SOLUTION 6 - now we have toggleModal(), this function accepts 3 params, first is the modal and second is the overlay, and if we send the third (which is not required to work) we automatically will send the user to index.html, this would be the case of the close modal that appears when we close an account.

5- Error handling like alerts if theres no correspondent account and another things need to receive some attention, they are messing with the app flow
*** SOLUTION 5.1 - we created the error modal to the login and to request to acc
*** SOLUTION 5.2 - globalModal() now manages all modals into app, changing its values according to the param sent ('login', 'app' or 'goToLogin' which is from close account)

4- closeAccount button created and settled but we are having an strange error need to fix this 
4.1 - requestAcc button is also created and we are pushing into requestMoves array the new request amounts (very incomplete better check again after fixing closeAccount)
*** SOLUTION 4 - to fix the closeAccount error we done some changes into the initializeLocalStorage behavior and accounts array also, fully setting to 0 if initialize be already true.
*** SOLUTION 4.1 -  
 
3- Logout and clearLocalStorage buttons has been created but they are not working, you need to find a way to use the initializeLocalStorage() function without overwriting the localStorage information (maybe we can use logout to save into local storage before login out)
3.1 - now we have stored the itens perma into accounts automatically but balance is not updating anymore.
*** SOLUTION 3 - logout now will store into accounts array every single element from localStorage, in that way we save all information including the movements, index and etc... ### REMEMBER that we are not dynamically creating the break point of the for loop soo eventually this could make some trouble, clearLocalStorage atm will just clear the local storage ðŸ˜…
*** SOLUTION 3.1 - inside initializeLocalStorage at the first moment login into the app we create the 'initialized' key with value true, saying that we already initialized all accounts that we have into accounts array.
we also have a if block which checks if 'initialized' is already into the localStorage if is we now wil loop through all keys of localStorage using object.keys.forEach storing into accounts[counter(index)] the value stored already into localStorage, we calculate the balance and set the active to false (we do it into every one acc), after all this we set back into localStorage the element with the new properties.

2- we need to clean or code because those localStorage mess is looking ugly, we need a function to do this, and we need to implement a way to get the balance and update it with the transfer event handler.
webStoreAccounts() is too limited and we need some function that update the localStorage after some change (movement or status, etc...)
*** SOLUTION 2 - we created the updateLocalStorage(arr) which receive the actual array and put this one into the localStorage, actually the transfer button is finished.

1- when we reload the page to pass from the login.html to app we lost the currentAccount object, need to implement some way of persist that information.
*** SOLUTION 1 - implement the localStorage and use it to persist and retrieve the data 